import unittest
from classicalToQuantum import *


class classicalToQuantum(unittest.TestCase):

    def testExperimentBooleanMatrix(self):
        booleanMatrix = [[False, False, False, False, False, False], [True, False, False, False, False, True],
                         [True, False, False, False, False, False], [False, False, True, False, False, False],
                         [False, False, False, True, False, False], [False, False, False, False, True, False]]

        vectIni = [True, False, False, False, False, False]

        self.assertEqual(experimentBooleanMatrix(1, booleanMatrix[:], vectIni[:]),
                         [False, True, True, False, False, False])

        self.assertEqual(experimentBooleanMatrix(3, booleanMatrix[:], vectIni[:]),
                         [False, False, False, False, True, False])

        self.assertEqual(experimentBooleanMatrix(5, booleanMatrix[:], vectIni[:]),
                         [False, True, False, False, False, False])

    def testMultipleSlitExperiment(self):
        matrix = [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.5, 0], [0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0, 0], [0.5, 0], [0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0, 0], [0, 0], [0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0]]]

        vectIni = [[1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]
        self.assertEqual(probabilisticSystem(matrix[:], vectIni[:], 1), [(0, 0), (0.3333333333333333, 0.0),
                                                                         (0.3333333333333333, 0.0),
                                                                         (0.3333333333333333, 0.0),
                                                                         (0.0, 0.0), (0.0, 0.0), (0.0, 0.0),
                                                                         (0.0, 0.0)])

        matrix = [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.3333333333333333, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.3333333333333333, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0]],
                  [[0, 0], [0, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0]],
                  [[0, 0], [0, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0]]]

        vectIni = [[1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]
        self.assertEqual(probabilisticSystem(matrix[:], vectIni[:], 2),
                         [(0.0, 0.0), (0.0, 0.0), (0.0, 0.0), (0.16666666666666666, 0.0),
                          (0.16666666666666666, 0.0), (0.3333333333333333, 0.0),
                          (0.16666666666666666, 0.0), (0.16666666666666666, 0.0)])

    def testMultipleSlitQuantumExperiment(self):
        matrix = [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.7071067811865475, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.7071067811865475, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [-0.4082482904638631, 0.4082482904638631], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [-0.4082482904638631, -0.4082482904638631], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.4082482904638631, -0.4082482904638631], [-0.4082482904638631, 0.4082482904638631], [0, 0],
                   [0, 0], [1, 0], [0, 0], [0, 0]],
                  [[0, 0], [0, 0], [-0.4082482904638631, -0.4082482904638631], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0]],
                  [[0, 0], [0, 0], [0.4082482904638631, -0.4082482904638631], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0]]]

        vectIni = [[1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]
        self.assertEqual(multipleSlitQuantumExperiment(matrix[:], vectIni[:], 1),
                         [[[0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0]],
                          [[0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0]],
                          [[0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0]],
                          [[0.1666666666666667, 0], [0.3333333333333334, 0], [0.0, 0], [1.0, 0], [0.0, 0], [0.0, 0],
                           [0.0, 0], [0.0, 0]],
                          [[0.1666666666666667, 0], [0.3333333333333334, 0], [0.0, 0], [0.0, 0], [1.0, 0], [0.0, 0],
                           [0.0, 0], [0.0, 0]],
                          [[0.0, 0], [0.3333333333333334, 0], [0.3333333333333334, 0], [0.0, 0], [0.0, 0], [1.0, 0],
                           [0.0, 0], [0.0, 0]],
                          [[0.1666666666666667, 0], [0.0, 0], [0.3333333333333334, 0], [0.0, 0], [0.0, 0], [0.0, 0],
                           [1.0, 0], [0.0, 0]],
                          [[0.1666666666666667, 0], [0.0, 0], [0.3333333333333334, 0], [0.0, 0], [0.0, 0], [0.0, 0],
                           [0.0, 0], [1.0, 0]]])

    def testGraphProbabilitiesVector(self):
        Matriz_Doble_Rendija = [
            [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
            [[1 / math.sqrt(2), 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
            [[1 / math.sqrt(2), 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
            [[0, 0], [-1 / math.sqrt(6), 1 / math.sqrt(6)], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
            [[0, 0], [-1 / math.sqrt(6), -1 / math.sqrt(6)], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0]],
            [[0, 0], [1 / math.sqrt(6), -1 / math.sqrt(6)], [-1 / math.sqrt(6), 1 / math.sqrt(6)], [0, 0], [0, 0],
             [1, 0], [0, 0], [0, 0]],
            [[0, 0], [0, 0], [-1 / math.sqrt(6), -1 / math.sqrt(6)], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0]],
            [[0, 0], [0, 0], [1 / math.sqrt(6), -1 / math.sqrt(6)], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0]]]

        Estado_Inicial = [[1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]

        answ = accionmatrizvector(multipleSlitQuantumExperiment(Matriz_Doble_Rendija[:],
                                                                  Estado_Inicial[:], 2), Estado_Inicial)
        graphProbabilitiesVector(answ)


if __name__ == '__main__':
    unittest.main()